rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get user data from Firestore
    // Note: Accessing Firestore from Storage Rules incurs reads
    function getUserData(userId) {
      return firestore.get(/databases/(default)/documents/usuarios/$(userId)).data;
    }

    function getUserRole(userId) {
      return getUserData(userId).rol;
    }

    function getUserOrganization(userId) {
      return getUserData(userId).organizacionId;
    }

    // Checks if the requesting user's 'contraparteAccess' map in their Firestore user document
    // contains the targetOrgId.
    // Example: /usuarios/$(request.auth.uid).data.contraparteAccess = { "partnerOrg123": true }
    function hasContraparteAccessToOrg(targetOrgId) {
        // Ensure request.auth is not null before trying to access request.auth.uid
        return request.auth != null && targetOrgId in getUserData(request.auth.uid).contraparteAccess;
    }

    // Path for contract documents: contracts/{organizationId}/{fileId}
    // This path is used by the contractService.ts: `contracts/${organizacionId}/contract_${Date.now()}`
    match /contracts/{organizationId}/{fileId} {
      allow read: if request.auth != null && (
                    getUserRole(request.auth.uid) == 'super_admin' ||
                    getUserOrganization(request.auth.uid) == organizationId || // User belongs to the organization that owns the file
                    hasContraparteAccessToOrg(organizationId) // User is a partner with access to this organization's files
                  );
      allow write: if request.auth != null && ( // Create, Update, Delete
                     getUserRole(request.auth.uid) == 'super_admin' ||
                     (getUserRole(request.auth.uid) == 'org_admin' && getUserOrganization(request.auth.uid) == organizationId) || // Org admin of the file's organization
                     (getUserRole(request.auth.uid) in ['manager', 'user'] && getUserOrganization(request.auth.uid) == organizationId) // Manager or User in the file's organization
                   );
    }

    // Path for contract documents: contratos/{organizationId}/{fileId} (Spanish version)
    // If this path is still in use or for legacy data, apply similar rules.
    // Otherwise, it could be made read-only for existing files or removed if fully deprecated.
    match /contratos/{organizationId}/{fileId} {
      allow read: if request.auth != null && (
                    getUserRole(request.auth.uid) == 'super_admin' ||
                    getUserOrganization(request.auth.uid) == organizationId ||
                    hasContraparteAccessToOrg(organizationId)
                  );
      allow write: if request.auth != null && (
                     getUserRole(request.auth.uid) == 'super_admin' ||
                     (getUserRole(request.auth.uid) == 'org_admin' && getUserOrganization(request.auth.uid) == organizationId) ||
                     (getUserRole(request.auth.uid) in ['manager', 'user'] && getUserOrganization(request.auth.uid) == organizationId)
                   );
    }

    // It's good practice to explicitly deny access to any other paths if not covered.
    // However, if no rule matches, access is denied by default.
    // Example for other potential user-specific storage:
    // match /user_profile_images/{userId}/{imageId} {
    //   allow read: if request.auth != null;
    //   allow write: if request.auth != null && request.auth.uid == userId;
    // }
  }
}
